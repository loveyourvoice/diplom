name: Terraform Workflow

on:
  push:
    branches:
      - master

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      yandex_token: ${{ secrets.YANDEX_TOKEN }}
      cloud_id: ${{ secrets.CLOUD_ID }}
      folder_id: ${{ secrets.FOLDER_ID }}
      access_key: ${{ secrets.ACCESS_KEY }}
      secret_key: ${{ secrets.SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.9.3"

      - name: Terraform Init (State Bucket)
        working-directory: ./terraform/state_bucket
        run: terraform init



      - name: Terraform Apply (State Bucket)
        if: steps.plan_state_bucket.outcome == 'success' && steps.plan_state_bucket.conclusion == 'success' && !contains(steps.plan_state_bucket.outputs.stdout, 'No changes')
        working-directory: ./terraform/state_bucket
        run: terraform apply -auto-approve tfplan

      - name: Save Terraform Outputs
        if: steps.plan_state_bucket.outcome == 'success' && !contains(steps.plan_state_bucket.outputs.stdout, 'No changes')
        working-directory: ./terraform/state_bucket
        run: |
          ACCESS_KEY=$(terraform output -raw access_key)
          SECRET_KEY=$(terraform output -raw secret_key)
          echo "ACCESS_KEY=$ACCESS_KEY" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV

      - name: Update GitHub Variables
        if: steps.plan_state_bucket.outcome == 'success' && !contains(steps.plan_state_bucket.outputs.stdout, 'No changes')
        run: |
          gh secret set ACCESS_KEY --body "${{ env.ACCESS_KEY }}"
          gh secret set SECRET_KEY --body "${{ env.SECRET_KEY }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Plan (Main)
        working-directory: ./terraform
        id: plan_main
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Terraform Apply (Main)
        if: steps.plan_main.outcome == 'success' && steps.plan_main.conclusion == 'success' && !contains(steps.plan_main.outputs.stdout, 'No changes')
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

